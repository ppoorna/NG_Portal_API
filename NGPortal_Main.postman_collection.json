{
	"info": {
		"_postman_id": "9fec52d8-2efc-4e23-9476-5f2e4058f3ce",
		"name": "NGPortal_Main",
		"description": "The Humanify Portal NG v1.0 API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login and Authorize - NG",
			"item": [
				{
					"name": "api/v1/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.data && jsonData.data.auth_token) {\r",
									"    pm.environment.set(\"auth_token1\", jsonData.data.auth_token);   \r",
									"}\r",
									"\r",
									"console.log(request)\r",
									"console.log('request.method' + request.method);\r",
									"\r",
									"pm.test(\"Verify the Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - type success or failer ? \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify the Body matches string - message signed in or not ?\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"You are signed in\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Login to NG portral"
					},
					"response": []
				},
				{
					"name": "api/v1/authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.data && jsonData.data.auth_token) {",
									"    pm.environment.set(\"token\", jsonData.data.auth_token);   ",
									"};",
									"pm.test(\"Verify the Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the Body matches string - type success or failer ?\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"});",
									"pm.test(\"verify the Body matches string - message signed in or not ?\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"You are signed in.\");",
									"    ",
									"});",
									"",
									"pm.test(\"Verify the Body matches string - local_username\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ppragna@hcs\");",
									"    ",
									"});",
									"",
									"pm.test(\"Verify the tenant_suffix\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"QA1\");",
									"});",
									"",
									"pm.test(\"Verify the - user_type_code\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"PRG_OWNER\");",
									"});",
									"",
									"pm.test(\"Verify is this User - is internal User or Not ?\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tenant_id",
									"value": "2",
									"type": "text"
								},
								{
									"key": "username",
									"value": "ppragna@hcs",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}/authorize",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"authorize"
							]
						},
						"description": "Authorize - provide the authorization key/autho token to all others end points very base and important one"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Security - Access Group, Collection & Role",
			"item": [
				{
					"name": "Role",
					"item": [
						{
							"name": "POST Method - Cloning the Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body is correct - code message has created or not ?\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The role was cloned\");\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json(),\r",
											" messages = \r",
											" [\r",
											"       \"We were unable to clone the role.\",\r",
											"        \"The role was cloned.\"\r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };\r",
											"\r",
											"//setting up the Global Variables -- Clone Role Name and ID\r",
											"\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											"let jsonDataRoleName = pm.response.json().data;\r",
											"\r",
											"pm.globals.set(\"RoleNme\", jsonDataRoleName.name);\r",
											"console.log(jsonData.data.name);\r",
											"\r",
											"let jsonDataRoleIds = pm.response.json().data;\r",
											"pm.globals.set(\"RoleId\", jsonDataRoleIds.id);\r",
											"console.log(jsonData.data.id);\r",
											"\r",
											"let jsonDataRoleDesc = pm.response.json().data;\r",
											"pm.globals.set(\"RoleDescr\", jsonDataRoleDesc.description);\r",
											"console.log(jsonData.data.description);\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole = pm.globals.replaceIn(\"Verify name -- {{RoleNme}}\"); \r",
											"console.log(stringWithRole);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"description\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/roles/2815/clone",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"2815",
										"clone"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Method -- Modify/Edit the Role Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body is correct - code message has created or not ?\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The role was updated\");\r",
											"});\r",
											"\r",
											"//setting up the Global Variables -- Clone Role Name and ID\r",
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											"let jsonDataRoleName = pm.response.json().data;\r",
											"pm.globals.set(\"RoleNme\", jsonDataRoleName.name);\r",
											"console.log(jsonData.data.name);\r",
											"\r",
											"let jsonDataRoleIds = pm.response.json().data;\r",
											"pm.globals.set(\"RoleId\", jsonDataRoleIds.id);\r",
											"console.log(jsonData.data.id);\r",
											"\r",
											"let jsonDataRoleDesc = pm.response.json().data;\r",
											"pm.globals.set(\"RoleDescr\", jsonDataRoleDesc.description);\r",
											"console.log(jsonData.data.description);\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole = pm.globals.replaceIn(\"Verify name -- {{RoleNme}}\"); \r",
											"console.log(stringWithRole);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"access_code\": null,\r\n    \"deleted\": null,\r\n    \"description\": \"{{RoleDescr}}\",\r\n    \"features_count\": 1,\r\n    \"group_type_code\": \"USER_DEF_ROLE\",\r\n    \"group_type_id\": 0,\r\n    \"id\": \"{{RoeId}}\",\r\n    \"is_assignable\": false,\r\n    \"is_collection_editable\": false,\r\n    \"is_collection_manageable\": false,\r\n    \"is_editable\": true,\r\n    \"is_managed\": false,\r\n    \"name\": \"{{RoleNme}}\",\r\n    \"tenant_id\": 0,\r\n    \"tenant_type_id\": 0,\r\n    \"users_count\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/roles/{{RoleId}}",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"{{RoleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Method -- Featch the Created and Edited Role Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole = pm.globals.replaceIn(\"Verify name -- {{RoleNme}}\"); \r",
											"console.log(stringWithRole);\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole1 = pm.globals.replaceIn(\"Verify name -- {{RoleDescr}}\"); \r",
											"console.log(stringWithRole1);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/roles?search=programGroupNm&search={{RoleNme}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "search",
											"value": "programGroupNm"
										},
										{
											"key": "search",
											"value": "{{RoleNme}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Method -- Will Add few the Features to the Role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Manage Bulk Load - Bulk Request, Manage Campaigns - Edit Campaigns, Manage Collections - Add/Remove Groups to collections, Add/Remove Objects, Creat \r",
											"//Collections, Delete Collections, Edit Collection"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The role was updated\");\r",
											"});\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole = pm.globals.replaceIn(\"Verify name -- {{RoleNme}}\"); \r",
											"console.log(stringWithRole);\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole1 = pm.globals.replaceIn(\"Verify name -- {{RoleDescr}}\"); \r",
											"console.log(stringWithRole1);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"features\" : [594, 595, 522, 567, 514, 543, 544, 547, 546, 548 ]    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/roles/{{RoleId}}/features",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"{{RoleId}}",
										"features"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Method -- Add Users to the Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole = pm.globals.replaceIn(\"Verify name -- {{RoleNme}}\"); \r",
											"console.log(stringWithRole);\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole1 = pm.globals.replaceIn(\"Verify name -- {{RoleDescr}}\"); \r",
											"console.log(stringWithRole1);\r",
											"\r",
											"pm.test(\"Verify the Body matches string Users ONE -- 'pstest@QA1' is present or Not? \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pstest@QA1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string Users TWO -- 'poorna@QA1' is present or Not? \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"poorna@QA1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string Users THREE -- 'satyamtestfor' is present or Not? \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"satyamtestfor\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"users\" :[8991, 7856, 7858]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/roles/{{RoleId}}/users",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"{{RoleId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Method -- Will Remove ALL the Features from the Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The role was updated\");\r",
											"});\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole = pm.globals.replaceIn(\"Verify name -- {{RoleNme}}\"); \r",
											"console.log(stringWithRole);\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithRole1 = pm.globals.replaceIn(\"Verify name -- {{RoleDescr}}\"); \r",
											"console.log(stringWithRole1);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"features\" : [ ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/roles/{{RoleId}}/features",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"{{RoleId}}",
										"features"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Method -- Remove Users from the Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string message \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The role was updated\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"users\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/roles/{{RoleId}}/users",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"{{RoleId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Method -- Will Delete the Role which was Created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or NOT?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/roles/{{RoleId}}",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"{{RoleId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Access Group",
					"item": [
						{
							"name": "Post Request -- verify the Given data is invliad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 422 [The name must be at least 2 characters]\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string -- where in the given data was invlid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The name must be at least 2 characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"description\": \"{{$randomAlphaNumeric}}\", \r\n    \"name\": \"{{$randomAlphaNumeric}}\"}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/access-groups",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"access-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Request -- Creates the new Access Goup Name with Dynamic one",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body is correct - code message has created or not ?\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"CREATE_ACCESS_GROUP_SUCCESS\");\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											" messages = \r",
											" [\r",
											"      \"The access group was created.\",\r",
											"      \r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };\r",
											"\r",
											"\r",
											"//setting up the Global Variables -- Access Group Name and ID\r",
											"\r",
											"\r",
											"let jsonDataAccessGroup = pm.response.json().data;\r",
											"let jsonDataAccessGroupID = pm.response.json().data;\r",
											"\r",
											"pm.globals.set(\"AccGrpNam\", jsonDataAccessGroup.name);\r",
											"console.log(jsonData.data.name);\r",
											"\r",
											"pm.globals.set(\"AccGrpID\", jsonDataAccessGroup.id);\r",
											"console.log(jsonData.data.id);\r",
											"\r",
											"//Verifing the  Global var which created as access group -- open the console to get the access group name..!\r",
											"const stringWithVars = pm.globals.replaceIn(\"Verify name -- {{AccGrpNam}}\"); \r",
											"console.log(stringWithVars);\r",
											"\r",
											"pm.globals.get(\"{{AccGrpNam}}\");\r",
											"// Verify the ID -- access Group name\r",
											"const stringWithVars1 = pm.globals.replaceIn(\"Verify the Access Group AccGrpID {{AccGrpNam}}\" );\r",
											"console.log(stringWithVars1);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"description\": \"{{$randomFirstName}}{{$randomInt}}\", \r\n    \"name\": \"{{$randomFirstName}}{{$randomInt}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/access-groups",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"access-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Method -- will seach the specific access group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const stringWithVars = pm.globals.replaceIn(\"Verify name -- {{AccGrpNam}}\"); \r",
											"console.log(stringWithVars);\r",
											"\r",
											"if (JSON.name === \"{{AccGrpNam}}\")\r",
											"{\r",
											"pm.test[\"AccGrpNam matches\"] = JSON.name == pm.globals.get (\"name\");\r",
											"console.log(name);\r",
											"}\r",
											"\r",
											"//pm.test(\"Check the active Created name\", () => {\r",
											"  //pm.expect(pm.globals.name).to.eql(\"Verify name -- {{AccGrpNam}}\");\r",
											"//});\r",
											"\r",
											"\r",
											"// Verify the ID -- access Group name\r",
											"const stringWithVarsGET1 = pm.globals.replaceIn(\"Verify the Access Group AccGrpNam -- {{AccGrpNam}}\" );\r",
											"console.log(stringWithVarsGET1);\r",
											"\r",
											"// Verify the ID -- access Group name's id\r",
											"const stringWithVarsGET2 = pm.globals.replaceIn(\"Verify the Access Group AccGrpID {{AccGrpID}}\" );\r",
											"console.log(stringWithVarsGET2);\r",
											"\r",
											"//$ accGroupName  `` both the ends\r",
											"\r",
											"const accGroupName = pm.globals.get(\"AccGrpNam\");\r",
											"\r",
											"//pm.test(\"Verify Body matches string - Access Group Name \" + accGroupName, function () {\r",
											"    //const bodyData = pm.response.json().data.map(item => item.name)\r",
											"    //pm.expect(bodyData).contains(accGroupName);\r",
											"  //  console.log(bodyData);\r",
											"//});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/access-groups/",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"access-groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{{AccGrpNam}}",
											"disabled": true
										}
									]
								},
								"description": "This is 'GET' request "
							},
							"response": []
						},
						{
							"name": "PUT Method -- Modify the Name and Description and ADD the USERS to Access Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const accGroupName1 = pm.globals.get(\"AccGrpNam\");\r",
											"\r",
											"//pm.test(\"Verify Body matches string - Access Group Name \" + accGroupName1, function () {\r",
											"   // const bodyData = pm.response.json().to.include(item => item.name)\r",
											"    //pm.expect(bodyData).contains(accGroupName1);\r",
											"  //  console.log(bodyData);\r",
											"//});\r",
											"\r",
											"const stringWithVarsPut = pm.globals.replaceIn(\"Verify the Access Group AccGrpNam -- {{AccGrpNam}}\" );\r",
											"console.log(stringWithVarsPut);\r",
											"\r",
											"pm.test(\"Verify the Body matches string Users FOUR users_count --  is present or Not? \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(4);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"access_type_code\": null,\r\n\"access_type_name\": null,\r\n\"collections_count\": 0,\r\n\"description\": \"1234awe58123458Poorna \",\r\n\"id\": \"{{AccGrpID}}\",\r\n\"is_assignable\": \"false\",\r\n\"is_editable\": \"false\",\r\n\"is_managed\": \"false\",\r\n\"is_objects_managed\": \"false\",\r\n\"name\": \"{{AccGrpNam}} \",\r\n\"tenant_id\": \"2\",\r\n\"type_id\": \"25\",\r\n\"type_level\": \"400\",\r\n\"type_name\": \"All General\",\r\n\"users\": [],\r\n\"users_count\": \"0\",\r\n\"users\": [8991, 7362, 7856, 7858]\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/access-groups/{{AccGrpID}}/users",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"access-groups",
										"{{AccGrpID}}",
										"users"
									]
								},
								"description": "PUT request i.e. manage/editing of Name and description"
							},
							"response": []
						},
						{
							"name": "PUT Method -- Will Remove the Users from the Access Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string Users FOUR users_count --  is present or Not? \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"access_type_code\": null,\r\n\"access_type_name\": null,\r\n\"collections_count\": 0,\r\n\"description\": \"1234awe58123458Poorna \",\r\n\"id\": \"{{AccGrpID}}\",\r\n\"is_assignable\": \"false\",\r\n\"is_editable\": \"false\",\r\n\"is_managed\": \"false\",\r\n\"is_objects_managed\": \"false\",\r\n\"name\": \"{{AccGrpNam}} \",\r\n\"tenant_id\": \"2\",\r\n\"type_id\": \"25\",\r\n\"type_level\": \"400\",\r\n\"type_name\": \"All General\",\r\n\"users\": [],\r\n\"users_count\": \"0\",\r\n\"users\": [ ]\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/access-groups/{{AccGrpID}}/users",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"access-groups",
										"{{AccGrpID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://portal-ng-q.tthcslabs.com/api/v1/access-groups/5622",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											" messages = \r",
											" [\r",
											"      \"The access group was deleted.\",\r",
											"      \r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Verify the ID -- access Group name's id\r",
											"const stringWithVars = pm.globals.replaceIn(\"Verify the Access Group AccGrpID is deleted -- {{AccGrpID}}\" );\r",
											"console.log(stringWithVars);\r",
											"\r",
											"// Verify the ID -- access Group name\r",
											"const stringWithVars1 = pm.globals.replaceIn(\"Verify the Access Group AccGrpNam is deleted -- {{AccGrpNam}}\" );\r",
											"console.log(stringWithVars1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/access-groups/{{AccGrpID}}",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"access-groups",
										"{{AccGrpID}}"
									]
								},
								"description": "Delete request (ensure frist fetch the 'GET'request then go for 'DELETE' request)"
							},
							"response": []
						},
						{
							"name": "GET Method -- will seach the specific access group name which as deleted  display as No Access Group were found.. !",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const stringWithVars = pm.globals.replaceIn(\"Verify name -- {{AccGrpNam}}\"); \r",
											"console.log(stringWithVars);\r",
											"\r",
											"if (JSON.name === \"{{AccGrpNam}}\")\r",
											"{\r",
											"pm.test[\"AccGrpNam matches\"] = JSON.name == pm.globals.get (\"name\");\r",
											"console.log(name);\r",
											"}\r",
											"\r",
											"//pm.test(\"Check the active Created name\", () => {\r",
											"  //pm.expect(pm.globals.name).to.eql(\"Verify name -- {{AccGrpNam}}\");\r",
											"//});\r",
											"\r",
											"\r",
											"// Verify the ID -- access Group name\r",
											"const stringWithVarsGET1 = pm.globals.replaceIn(\"Verify the Access Group AccGrpNam -- {{AccGrpNam}}\" );\r",
											"console.log(stringWithVarsGET1);\r",
											"\r",
											"// Verify the ID -- access Group name's id\r",
											"const stringWithVarsGET2 = pm.globals.replaceIn(\"Verify the Access Group AccGrpID {{AccGrpID}}\" );\r",
											"console.log(stringWithVarsGET2);\r",
											"\r",
											"//$ accGroupName  `` both the ends\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Access Group Name which was deleted .. will displayas No Access Group were found or NOT ?\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No access groups were found\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/access-groups/?search={{AccGrpNam}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"access-groups",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "{{AccGrpNam}}"
										}
									]
								},
								"description": "This is 'GET' request "
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					}
				},
				{
					"name": "Colletions",
					"item": [
						{
							"name": "POST Method -- which Create the Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											"messages = \r",
											" [\r",
											"      \"The access collection was created.\",\r",
											"      \r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"let jsonDataCollectionName = pm.response.json().data;\r",
											"pm.globals.set(\"CollectionNam\", jsonDataCollectionName.name);\r",
											"console.log(jsonData.data.name);\r",
											"\r",
											"let jsonDataCollectionDescription = pm.response.json().data;\r",
											"pm.globals.set(\"CollectionDescri\", jsonDataCollectionDescription.description);\r",
											"console.log(jsonData.data.description);\r",
											"\r",
											"let jsonDataCollectionIds = pm.response.json().data;\r",
											"pm.globals.set(\"CollectionID\", jsonDataCollectionIds.id);\r",
											"console.log(jsonData.data.id);\r",
											"\r",
											"pm.test(\"Verify the Status code is 200 is or Not?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the object_type_name - matches string  \", function () {\r",
											"pm.expect(pm.response.text()).to.include(jsonData.data.type_name)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Collection name matches\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(jsonData.data.name)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Collection name ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(jsonData.data.id)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Collection name description \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(jsonData.data.description)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"name\": \"{{$randomFirstName}}{{$randomInt}}\", \r\n     \"description\": \"{{$randomFirstName}}{{$randomInt}}\",\r\n     \"object_type_id\": 35\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/access-collections",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"access-collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Method -- Search/Featch the data Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 is or Not?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verify the ID -- Collecton Name\r",
											"const stringWithVarsCollect = pm.globals.replaceIn(\"Verify the CollectionNam -- {{CollectionNam}}\" );\r",
											"console.log(stringWithVarsCollect);\r",
											"\r",
											"// Verify the  -- Collecton Des\r",
											"const stringWithVarsCollectDes = pm.globals.replaceIn(\"Verify the collection CollectionDescri -- {{CollectionDescri}}\" );\r",
											"console.log(stringWithVarsCollectDes);\r",
											"\r",
											"//pm.test(\"Check the active Created collection name\", () => {\r",
											"//pm.expect(pm.globals.name).to.eql(\"Verify name -- {{CollectionNam}}\");\r",
											"//});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{api_url}}/access-collections?search={{CollectionNam}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"access-collections"
									],
									"query": [
										{
											"key": "search",
											"value": "{{CollectionNam}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Method -- Modify the Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 is or Not?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verify the -- Collecton Name\r",
											"const stringWithVarsCollect = pm.globals.replaceIn(\"Verify the CollectionNam -- {{CollectionNam}}\" );\r",
											"console.log(stringWithVarsCollect);\r",
											"\r",
											"// Verify the  -- Collecton Des\r",
											"const stringWithVarsCollectDes = pm.globals.replaceIn(\"Verify the collection CollectionDescri -- {{CollectionDescri}}\" );\r",
											"console.log(stringWithVarsCollectDes);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"access_type_code\": null,\r\n            \"access_type_name\": null,\r\n            \"is_editable\": false,\r\n            \"is_assignable\": true,\r\n            \"allowed_to_edit_collection\": true,\r\n            \"collection\": [845917, 807343],\r\n            \"description\": \"{{CollectionDescri}}\",\r\n\r\n\r\n            \"is_objects_manageable\": true,\r\n            \"object_type_id\": 35,\r\n            \"object_type_name\": \"Routing Controls\",\r\n            \"id\": \"{{CollectionID}}\",\r\n            \"name\": \"{{CollectionNam}}\",\r\n            \r\n            \"tenant_id\": 2,\r\n            \"tenant_user_id\": null,\r\n            \"type_id\": 13,\r\n            \"type_name\": \"General\",\r\n            \"type_code\": \"GEN_COL\",\r\n            \"selected\": null,\r\n            \"manage_access_collection\": null,\r\n            \"is_managed\": false,\r\n            \"objects_count\": 34,\r\n            \"users_count\": 0,\r\n            \"groups_count\": 1\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/access-collections/{{CollectionID}}",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"access-collections",
										"{{CollectionID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://portal-ng-q.tthcslabs.com/api/v1/access-collections/10503",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 is or Not?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string type \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string message \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The access collection was deleted.\");\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"messages = \r",
											" [\r",
											"      \"The access collection was deleted.\"\r",
											"      \r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/access-collections/{{CollectionID}}",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"access-collections",
										"{{CollectionID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET  Request -- Verify the whether Created Delete or Not?",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 is OK or Noy?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string Type\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"warning\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No access collections were found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/access-collections?search={{CollectionNam}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"access-collections"
									],
									"query": [
										{
											"key": "search",
											"value": "{{CollectionNam}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Security - Access Group, Collection & Role"
		},
		{
			"name": "System-Wide Audit",
			"item": [
				{
					"name": "GET - Request which will search for the Access Group for the month July",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"No system wide audits were found.\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"warning\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"warning\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/system-wide/audits?start_date=2020-07-01&end_date=2020-07-30&object_types[]=ACC_GROUPS",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"system-wide",
								"audits"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2020-07-01"
								},
								{
									"key": "end_date",
									"value": "2020-07-30"
								},
								{
									"key": "object_types[]",
									"value": "ACC_GROUPS"
								}
							]
						},
						"description": "GET method -- will fetch data for all the Feautes that want to audit "
					},
					"response": []
				},
				{
					"name": "GET - Request which will search for the Precision Queues for the month of April",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"No system wide audits were found.\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"warning\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"warning\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/system-wide/audits?start_date=2020-04-01&end_date=2020-04-30&object_types[]=PQ",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"system-wide",
								"audits"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2020-04-01"
								},
								{
									"key": "end_date",
									"value": "2020-04-30"
								},
								{
									"key": "object_types[]",
									"value": "PQ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Request which will search the Reason for the April Month only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - Description\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Delete Reasons. Delete reason Haylie920.\");\r",
									"});\r",
									"\r",
									"var resp = JSON.parse(responseBody);\r",
									"console.log(resp);\r",
									"console.log(resp.data);\r",
									"for (var i = 0;i<resp.data.length;i++)\r",
									"{\r",
									"    console.log(resp.data.length); //to understand the length of array\r",
									"    console.log(resp.data[i].feature_name); //to understand the path to the label\r",
									"    if (resp.data[i].feature_name == \"Delete Reasons\")\r",
									"    {\r",
									"    //Checking NAME from loop\r",
									"    pm.test(\"feature_name is: \" + (resp.data[i].feature_name), function () \r",
									"    {\r",
									"        pm.expect(resp.data[i].feature_name).to.eql(\"Delete Reasons\");\r",
									"    });\r",
									"    }\r",
									"}\r",
									"\r",
									"var resp = JSON.parse(responseBody);\r",
									"console.log(resp);\r",
									"console.log(resp.data);\r",
									"for (var i = 0;i<resp.data.length;i++)\r",
									"{\r",
									"    console.log(resp.data.length); //to understand the length of array\r",
									"    console.log(resp.data[i].created_at); //to understand the path to the label\r",
									"    if (resp.data[i].created_at == \"04/09/2021 01:39:42 AM\")\r",
									"    {\r",
									"    //Checking NAME from loop\r",
									"    pm.test(\"created_at is: \" + (resp.data[i].created_at), function () \r",
									"    {\r",
									"        pm.expect(resp.data[i].created_at).to.eql(\"04/09/2021 01:39:42 AM\");\r",
									"    });\r",
									"    }\r",
									"   \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/system-wide/audits?start_date=2021-04-01&end_date=2021-04-30&object_types[]=RC",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"system-wide",
								"audits"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2021-04-01"
								},
								{
									"key": "end_date",
									"value": "2021-04-30"
								},
								{
									"key": "object_types[]",
									"value": "RC"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent Desktop Layout",
			"item": [
				{
					"name": "Call Variables",
					"item": [
						{
							"name": "api/v1/agent-desktop/media/:cluster_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.json().data) {\r",
											"    pm.environment.set(\"layout_xml\", pm.response.json().data.layout);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/agent-desktop/media/:cluster_id",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"agent-desktop",
										"media",
										":cluster_id"
									],
									"variable": [
										{
											"key": "cluster_id",
											"value": "1",
											"type": "string"
										}
									]
								},
								"description": "GET  method Search : - This end point fetch all the call variables records [call variables seach names]"
							},
							"response": []
						}
					]
				},
				{
					"name": "Team Desktop Layouts",
					"item": [
						{
							"name": "POST - Request which will Creates the New Teams Layout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											" messages = \r",
											" [\r",
											"      \"The teams layout was created.\"\r",
											"      \r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };\r",
											" \r",
											"\r",
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cluster_id\": 1,\r\n    \"description\": \"{{$randomColor}}}}\",\r\n    \"name\" : \"{{$randomCity}}\",\r\n    \"layout\": \"<finesseLayout  </finesseLayout>\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/agent-desktop/teams",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"agent-desktop",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Request will search the specific Name Team Desktop Layout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonDataTeamsName = pm.response.json().data;\r",
											"pm.globals.set(\"TeamsNme\", jsonDataTeamsName.name);\r",
											"console.log(\"Abbottmouth\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/agent-desktop/teams/1?search=Abbottmouth",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"agent-desktop",
										"teams",
										"1"
									],
									"query": [
										{
											"key": "search",
											"value": "Abbottmouth"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Skills",
			"item": [
				{
					"name": "POST Method - Creates the Skills Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The skill was created.\",\r",
									"       \"Unauthenticated.\",\r",
									"       \"The given data was invalid.\",\r",
									"       \"This name already exists.\"\r",
									"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									" let jsonDataSkillsName = pm.response.json().data;\r",
									"pm.globals.set(\"SkillsNme\", jsonDataSkillsName.name);\r",
									"console.log(jsonData.data.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \"collections\": [8250, 9622, 8784, 8245, 6595],\r\n    \"description\": \"QATest143\",\r\n   \"media_domain_id\" : 5000001,\r\n    \"name\": \"{{$randomCountry}}\",\r\n    \"platform_id\": 5016001\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/skills",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Method -- Search/Featchs the Skills Name Specific",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Body matches string  Skill - Platform name -- \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Generic_PG_2\");\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									"let jsonDataSkillsIds = pm.response.json().data;\r",
									"pm.globals.set(\"SkillsId\", jsonDataSkillsIds[0].id);\r",
									"console.log(jsonData.data[0].id);\r",
									"\r",
									"pm.test(\"Verify the SIP Object body matches string Data - Guid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].name)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the SIP Object body matches string Data - Guid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].id)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/skills?search={{SkillsNme}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"skills"
							],
							"query": [
								{
									"key": "search",
									"value": "{{SkillsNme}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Method -- Modify the Skills Name and Adds the Agents to the Skill Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The skill was updated.\",\r",
									"       \"Unauthenticated.\",\r",
									"       \"The given data was invalid.\",\r",
									"       \"We were unable to update ICM.\"\r",
									"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"QATest143\",\r\n    \"id\": \"{{SkillsId}}\",\r\n    \"is_editable\": true,\r\n    \"media_domain_name\": \"bsMCAL_SF_Case\",\r\n    \"name\": \"{{SkillsNme}}\",\r\n    \"original_id\": 9257,\r\n    \"platform_agent_id\": 749073,\r\n    \"platform_id\": 5016001,\r\n    \"platform_name\": \"Generic_PG_2\",\r\n    \"service_level\": -1,\r\n    \"skill_name\": null,\r\n    \"skill_type\": null,\r\n    \"source_system_id\": 1,\r\n    \"tenant_id\": 2,\r\n    \"transfer_number\": null,\r\n    \"users\": [7429, 7428, 6951, 7336, 6951],\r\n    \"users_count\": 0,\r\n    \"uwf_skill_id\": null \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/skills/{{SkillsId}}/users",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"skills",
								"{{SkillsId}}",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Finesse Admin",
			"item": [
				{
					"name": "Reasons",
					"item": [
						{
							"name": "Reason - Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// type - W : Wrap Up, 'L' - Sign Out, 'N' - Not Ready "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Verify the Status code is 200  or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											" messages = \r",
											" [\r",
											"       \"The reason code was saved.\",\r",
											"       \"We were unable to save the reason in Finesse.\",\r",
											"       \"We were unable to create the reason in ICM.\",\r",
											"       \"Unauthenticated\"\r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };\r",
											"\r",
											"let jsonDataReasonCoName = pm.response.json().data;\r",
											"pm.globals.set(\"ReasonCodNme\", jsonDataReasonCoName.name);\r",
											"console.log(jsonData.data.name);\r",
											"\r",
											"let jsonDataReasonCoIds = pm.response.json().data;\r",
											"pm.globals.set(\"ReasonCoId\", jsonDataReasonCoIds.id);\r",
											"console.log(jsonData.data.id);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify the Reason Code  name matches\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(jsonData.data.name)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Reason Code  name ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(jsonData.data.id)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Reason Code  name description \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(jsonData.data.description)\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}{{$randomInt}}\",\r\n    \"clusters_id_list\": [99] ,\r\n    \"description\": \"{{$randomFirstName}}{{$randomInt}}\",\r\n    \"id\": 1,\r\n    \"is_finesse\": true,\r\n    \"is_global\": false,\r\n    \"is_icm\": true,\r\n    \"is_portal\": true,\r\n    \"type\": \"L\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/reason-codes",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"reason-codes"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Method -- Search the specific Reason Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Reason Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"PtestReasons\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Reason description\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"test\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Reason ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"5677001\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/reason-codes",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"reason-codes"
									],
									"query": [
										{
											"key": "searchColumn",
											"value": "reasonText",
											"disabled": true
										},
										{
											"key": "search",
											"value": "PtestReasons",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1000",
											"disabled": true
										}
									]
								},
								"description": "GET method - Input search - 'Test'"
							},
							"response": []
						},
						{
							"name": "GET Method -- Search with Type of Resons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Reason Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Reason description\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"description\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Reason ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"const stringWithReasonNme = pm.globals.replaceIn(\"Verify name -- {{ReasonCodNme}}\"); \r",
											"console.log(stringWithReasonNme);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/reason-codes?searchColumn=reasonText&search={{ReasonCodNme}}",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"reason-codes"
									],
									"query": [
										{
											"key": "searchColumn",
											"value": "reasonText"
										},
										{
											"key": "search",
											"value": "{{ReasonCodNme}}"
										}
									]
								},
								"description": "GET - Method, Search Funcationality"
							},
							"response": []
						},
						{
							"name": "DELETE Method --  Deletes the Reason Name Which was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json(),\r",
											" messages = \r",
											" [\r",
											"       \"The reason code was not found.\",\r",
											"       \"The reason codes was deleted.\"\r",
											" ]\r",
											" \r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"id\": {{ReasonCoId}}, \r\n   \"clusters_id_list\": [1]\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/reason-codes/delete",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"reason-codes",
										"delete"
									]
								}
							},
							"response": []
						}
					],
					"description": "Reasons\r\n\r\n"
				},
				{
					"name": "Phone Book",
					"item": [
						{
							"name": "phone-books-Create Phone book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											" messages = \r",
											" [\r",
											"       \"A phone book with the same name already exists.\",\r",
											"       \"The phone book was saved.\"\r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											"\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"    })   \r",
											" };\r",
											"\r",
											"pm.test(\"Verify the Status code is 200 or NOT ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - type \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"name\", \"QAplusRegTest123\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"{{name}}\", \r\n    \"allClusters\": \"true\", \r\n    \"id\": 0, \r\n    \"primary_cluster_id\": 1,\r\n    \"clusters_id_list\": [1], \r\n    \"is_global\" : false \r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/phone-books",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"phone-books"
									]
								},
								"description": "PUT method - Create the phone books"
							},
							"response": []
						},
						{
							"name": "GET Method -- Phone Book Name specific search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Phone Book Name \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"QAplusRegTest123\");\r",
											"});\r",
											"\r",
											"//setting up the Global Variables -- Phone Book Name\r",
											"let jsonData = pm.response.json();\r",
											"console.log(\"json response : \", jsonData);\r",
											"\r",
											"let jsonDataPhoneBookNam = pm.response.json().data;\r",
											"pm.globals.set(\"PhoneBookNam\", jsonDataPhoneBookNam[0][0].name);\r",
											"console.log(jsonData.data[0][0].name);\r",
											"\r",
											"let jsonDataPhoneBookFinesseNameId = pm.response.json().data;\r",
											"pm.globals.set(\"PhoneBookFinesseId\", jsonDataPhoneBookFinesseNameId[0][0].finesse_id);\r",
											"console.log(jsonData.data[0][0].finesse_id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/phone-books?search={{name}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"phone-books"
									],
									"query": [
										{
											"key": "search",
											"value": "{{name}}"
										}
									]
								},
								"description": "GET method All phone book"
							},
							"response": []
						},
						{
							"name": "GET Method -- Phone Book Name generic search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - ID type \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"12973\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - Name \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"QAplusRegTest1\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/phone-books",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"phone-books"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Method - For Phone Book Created, 'Contacts' will add to the Phone Book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json(),\r",
											" messages = \r",
											" [\r",
											"       \"The contact was created.\",\r",
											"       \"api.codes.PHONE_BOOK_NOT_FOUND_ERROR\",\r",
											"       \"We were unable to find the phone book in Finesse.\"\r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cluster_id\": 1,\r\n    \"description\": \"Testing\",\r\n    \"finesse_id\": \"{{PhoneBookFinesseId}}\",\r\n    \"first_name\": \"Test1\",\r\n    \"last_name\": \"Test2\",\r\n    \"phone_book_id\": 12978,\r\n    \"phone_number\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/phone-books/contacts",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"phone-books",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST - Which Deletes the 'Contacts' of the Phone Book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json(),\r",
											" messages = \r",
											" [\r",
											"       \"The contact was deleted.\",\r",
											"       \"We were unable to find the phone book in Finesse.\"\r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cluster_id\": 1,\r\n    \"first_name\": \"Test1\",\r\n    \"last_name\": \"Test2\",\r\n    \"phone_book_id\": 12978,\r\n    \"uri\": \"/finesse/api/PhoneBook/{{PhoneBookFinesseId}}/Contact/4733\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/phone-books/contacts/delete",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"phone-books",
										"contacts",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Method -- Entire Phone Book plus the contacts too",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json(),\r",
											" messages = \r",
											" [\r",
											"       \"The reason code was not found\",\r",
											"       \"The phone book was deleted.\",\r",
											"       \"api.codes.PHONE_BOOK_NOT_FOUND_ERROR\"\r",
											" ]\r",
											" if (jsonData.type === \"error\") \r",
											" {\r",
											"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"error\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })\r",
											" }\r",
											" else\r",
											" {\r",
											"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
											"    {\r",
											"        pm.expect(jsonData.type).to.equal(\"success\")\r",
											"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
											"    })   \r",
											" };"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"{{PhoneBookNam}}\", \r\n   \"clusters_id_list\": [1]\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/phone-books/delete",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"phone-books",
										"delete"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Precision Queues",
			"item": [
				{
					"name": "Precision Queues",
					"item": [
						{
							"name": "GET Method -- Search the specific QA Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string PQ Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"AlePQsync234\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - PQ Descripton\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Testing synchronization\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches ID \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"5066\");\r",
											"        \r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/precision-queues?searchColumn=name&search=AlePQSync234",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"precision-queues"
									],
									"query": [
										{
											"key": "searchColumn",
											"value": "name"
										},
										{
											"key": "search",
											"value": "AlePQSync234"
										}
									]
								},
								"description": "This GET method  -- Search preision queues with string 'Ale'"
							},
							"response": []
						},
						{
							"name": "GET Method -- Search through ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string PQ Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"QA1GT_Test7\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - PQ Descripton\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"test\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches ID \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"5008\");\r",
											"        \r",
											"});    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/precision-queues/5008",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"precision-queues",
										"5008"
									]
								},
								"description": "ID - 5008 which fetches the Steps of Precision Queues"
							},
							"response": []
						},
						{
							"name": "GET Method -- All Search PQs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 Or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"AlePQsync234\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Testing synchronization\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://portal-ng-q.tthcslabs.com/api/v1/precision-queues",
									"protocol": "https",
									"host": [
										"portal-ng-q",
										"tthcslabs",
										"com"
									],
									"path": [
										"api",
										"v1",
										"precision-queues"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Method -- Search the specific PQ Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string PQ Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"AlePQsync234\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - PQ Descripton\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Testing synchronization\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches ID \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"5066\");\r",
											"        \r",
											"});    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/precision-queues?searchColumn=name&search=AlePQSync234",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"precision-queues"
									],
									"query": [
										{
											"key": "searchColumn",
											"value": "name"
										},
										{
											"key": "search",
											"value": "AlePQSync234"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Attributes Assignment",
					"item": [
						{
							"name": "GET Method - Search/Featch All Attributes Names",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string -- Atribute Name \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"AleEnableAttribute\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string -- Atribute Name another one \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"TestSyncRebe123\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/attributes",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"attributes"
									]
								},
								"description": "This is GET method -- Generic Search with any input"
							},
							"response": []
						},
						{
							"name": "GET Method -- wich Featch thes Attributes Name -- AleEnableAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string -- Atribute Name \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"AleEnableAttribute\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/attributes?searchColumn=name&search=AleEnableAttribute",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"attributes"
									],
									"query": [
										{
											"key": "searchColumn",
											"value": "name"
										},
										{
											"key": "search",
											"value": "AleEnableAttribute"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Method -- Agent Name Search FN LN and UN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string -- Agent's Frist Name \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Maria\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string -- Agent's Last Name \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"deLasCuevas\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string -- Agent's userName id \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"0987654321\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/attributes/agents?search=Maria",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"attributes",
										"agents"
									],
									"query": [
										{
											"key": "search",
											"value": "Maria"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Method -- Where in AttributesName are added to  Agent Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - type\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body matches string - message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"he attribute assignment was saved.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n   {\"agent_ids\": [\"5544\", \"5436\"],\r\n    \"attributes_info\" :[{\r\n    \"change_stamp\": 1,\r\n    \"data_type\": \"4\",\r\n    \"data_type_string\": \"Boolean\",\r\n    \"default_value\": \"true\",\r\n    \"description\": \"testing\",\r\n    \"id\": 5034,\r\n    \"is_editable\": true,\r\n    \"name\": \"QA1customer_service\",\r\n    \"ref_url\": \"/unifiedconfig/config/attribute/5034\" }]\r\n    }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/attributes/agent",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"attributes",
										"agent"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Method -- Removes the Agents names",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the Status code is 200 or NOT ?\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body type is success or Not ? ?\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"Verify the Body message is 'The Agent was Updated' or Not ?\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The agent was updated.\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/ecmascript",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent_id\": 5544,\r\n    \"attributes\": [5026, 5011]\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/attributes/agent-update",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"attributes",
										"agent-update"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Teams",
			"item": [
				{
					"name": "POST - Creates the Teams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The team was created.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									" let jsonDataTeamsName = pm.response.json().data;\r",
									"pm.globals.set(\"TeamsNme\", jsonDataTeamsName.name);\r",
									"console.log(jsonData.data.name);\r",
									"\r",
									" let jsonDataTeamsIds = pm.response.json().data;\r",
									"pm.globals.set(\"TeamsId\", jsonDataTeamsIds.id);\r",
									"console.log(jsonData.data.id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"collections\":[9473, 9619, 9503, 8221, 8248, 8783, 9467, 9625],\r\n    \"description\": \"{{$randomColor}}\",\r\n    \"name\": \"{{$randomCountry}}\",\r\n    \"platform_id\": 5000001\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/teams",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request will modify the Teams name and Adds the Agents and Supervisors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [      \"The team was updated.\",\r",
									"      \"The given data was invalid.\",\r",
									"      \"The team was created.\",\r",
									"      \"Unauthenticated.\",\r",
									"      \"The team already exists.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"agents\": [6324, 2754, 2755, 2756, 2758, 2759, 2775, 2828],    \r\n    \"description\": \"Ok\",\r\n    \"name\" : \"{{TeamsNme}}\",\r\n    \"platform_id\": 5000001,\r\n    \"primary_supervisor_id\": 0,\r\n    \"supervisors\" : [3169, 8837, 7383, 7375, 2762, 8628, 3169, 8837, 7383, 7375]\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams/{{TeamsId}}/users",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams",
								"{{TeamsId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Will featch the Team Name, Agent and Supevisors Counts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - Name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].name)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].id)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - platform_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].platform_name)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - Description\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].description)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams?search={{TeamsNme}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams"
							],
							"query": [
								{
									"key": "search",
									"value": "{{TeamsNme}}"
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5000",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - request will Add the 'Reason' to Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [      \"The assigned reasons were updated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"pm.test(\"Verify the  Reason matches string Data --\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The assigned reasons were updated\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reasons\": [5535001, 5680001, 5692001, 5715001, 5731001, 47, 45]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams/{{TeamsId}}/reasons",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams",
								"{{TeamsId}}",
								"reasons"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request will add the 'Phone Books' to Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [      \"The assigned phone books were updated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"pm.test(\"Verify the SIP Object body matches string Data - Guid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The assigned phone books were updated.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone_books\" : [228, 262, 227]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams/{{TeamsId}}/phone-books",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams",
								"{{TeamsId}}",
								"phone-books"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request will Remove the 'Reasons' which were added to the Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [      \"The assigned reasons were updated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"pm.test(\"Verify the  Reason matches string Data --\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The assigned reasons were updated\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reasons\": []\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams/{{TeamsId}}/reasons",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams",
								"{{TeamsId}}",
								"reasons"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request will Remove the 'Phone Books' which were added to the Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [      \"The assigned phone books were updated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"pm.test(\"Verify the SIP Object body matches string Data - Guid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The assigned phone books were updated.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone_books\" : []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams/{{TeamsId}}/phone-books",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams",
								"{{TeamsId}}",
								"phone-books"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request which Removes the 'Agent' and 'Supervisors' from the Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [      \"The team was updated.\",\r",
									"      \"The given data was invalid.\",\r",
									"      \"The team was created.\",\r",
									"      \"Unauthenticated.\",\r",
									"      \"The team already exists.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"errors\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"errors\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"agents\": [],    \r\n    \"description\": \"Ok\",\r\n    \"name\" : \"{{TeamsNme}}\",\r\n    \"platform_id\": 5000001,\r\n    \"primary_supervisor_id\": 0,\r\n    \"supervisors\" : []\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams/{{TeamsId}}/users",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams",
								"{{TeamsId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Request which will Search the Platform Id along with Team Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - Name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].name)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].id)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - platform_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].platform_name)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - Description\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].description)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - agents_count\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.data[0].agents_count)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams?search={{TeamsNme}}&platform_id=5000001",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams"
							],
							"query": [
								{
									"key": "search",
									"value": "{{TeamsNme}}"
								},
								{
									"key": "platform_id",
									"value": "5000001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Request which deletes the Entire Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									"pm.test(\"Verify the Teams name matches string Data - which is Deleted or Not ?\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The team was deleted.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/teams/{{TeamsId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"teams",
								"{{TeamsId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Routing Controls",
			"item": [
				{
					"name": "POST Request - Which will creates the Routing Control for Date/Time",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//var datecode = {\r",
									"  //  \"code\": \"{{$randomBsBuzz}}\",\r",
									"   // \"name\" : \"{{$randomBsBuzz}}\",\r",
									"   // \"description\" : \"{{$randomBsBuzz}}\"\r",
									"//}   \r",
									"\r",
									"//pm.globals.set('datecode', JSON.stringify(datecode));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was created.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonDataRoutingDateNam = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConDateNam\", jsonDataRoutingDateNam.name);\r",
									"console.log(jsonData.data.name);\r",
									"\r",
									"let jsonDataRoutingDateIDs = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConDateId\", jsonDataRoutingDateIDs.id);\r",
									"console.log(jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{$randomBsBuzz}}\",\r\n    \"collections\": [3375, 4062, 10980, 11155, 10996, 11154, 1676, 10997, 11124, 11013, 10964, 11219, 6002, 6003, 6004],\r\n    \"description\": \"{{$randomBsBuzz}}\",\r\n    \"name\": \"{{$randomBsBuzz}}\",\r\n    \"starts_at\": \"04/07/2023 12:00 PM\",\r\n    \"timezone\": \"AET\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/datetime",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"datetime"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request which modify the Routing Control - Date/Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was updated.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"Computer\",\r\n    \"custom_schedules\": [],\r\n    \"description\": \"Keyboard1\",\r\n    \"ends_at\": null,\r\n    \"id\": {{RoutingConDateId}},\r\n    \"is_change_pending\": true,\r\n    \"is_editable\": true,\r\n    \"is_timezone_required\": true,\r\n    \"name\": \"{{RoutingConDateNam}}\",\r\n    \"reset_time\": null,\r\n    \"reset_value\": null,\r\n    \"reset_value_enabled\": false,\r\n    \"schedules\": [],\r\n    \"starts_at\": \"04/07/2023 12:00 PM\",\r\n    \"status\": true,\r\n    \"sync\": true,\r\n    \"table_column_name\": null,\r\n    \"timezone\": \"AET\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConDateId}}/datetime",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConDateId}}",
								"datetime"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Request - Which will search the Routing Contorl by Name - Date/Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls?id_control_types[]=8&search={{RoutingConDateNam}}&sortBy[]=LastUpdatedDateTime",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls"
							],
							"query": [
								{
									"key": "id_control_types[]",
									"value": "8"
								},
								{
									"key": "search",
									"value": "{{RoutingConDateNam}}"
								},
								{
									"key": "sortBy[]",
									"value": "LastUpdatedDateTime"
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Request will Deletes the Routing Contorl  Date/Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was deleted.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConDateId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConDateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Request - Which will Creates the Routing Contorls for Percentage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was created.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonDataRoutingPercentNam = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConPerNam\", jsonDataRoutingPercentNam.name);\r",
									"console.log(jsonData.data.name);\r",
									"\r",
									"let jsonDataRoutingPercentIDs = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConPerId\", jsonDataRoutingPercentIDs.id);\r",
									"console.log(jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{$randomBsBuzz}}\",    \r\n    \"collections\": [3375, 4062, 10980, 11155, 10996, 11154, 1676, 10997, 11124, 11013, 10964, 11219, 6002, 6003, 6004],\r\n    \"description\": \"Test\",\r\n    \"name\": \"{{$randomBsBuzz}}\",\r\n    \"reset_time\": \"12:00 PM\",\r\n    \"reset_value\": 2,\r\n    \"reset_value_enabled\": true,\r\n    \"timezone\": \"America/Denver\",\r\n    \"value\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/percentage",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"percentage"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request which modify the Roucting congrol - Percentage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was updated.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"OK\",\r\n    \"custom_schedules\": [],\r\n    \"description\": \"{{RoutingConPerNam}}\",\r\n    \"ends_at\": null,\r\n    \"id\": \"{{RoutingConPerId}}\",\r\n    \"is_change_pending\": true,\r\n    \"is_editable\": true,\r\n    \"is_timezone_required\": false,\r\n    \"name\": \"{{RoutingConPerNme}}\",\r\n    \"reset_time\": \"12:00 PM\",\r\n    \"reset_value\": \"2\",\r\n    \"reset_value_enabled\": true,\r\n    \"schedules\": [],\r\n    \"starts_at\": null,\r\n    \"status\": false,\r\n    \"sync\": false,\r\n    \"table_column_name\": null,\r\n    \"timezone\": \"AET\",\r\n    \"type\": {\"id\": 7, \"name\": \"Schedule\", \"description\": \"A schedule (by day and half hour)\", \"code\": \"SCHEDULE\"},\r\n    \"updated_at\": \"04/09/2022 02:35 AM\",\r\n    \"user\": {\"id\": 7362, \"username\": \"ppragna@HCS\"},\r\n    \"value\": \"1\"\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConPerId}}/percentage",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConPerId}}",
								"percentage"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Request which will Delets the Percentage Control",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was deleted.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConPerId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConPerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request which will creates the Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was created.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonDataRoutingcheduleName = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConSchedNam\", jsonDataRoutingcheduleName.name);\r",
									"console.log(jsonData.data.name);\r",
									"\r",
									"let jsonDataRoutingScheduleIDs = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConSchedId\", jsonDataRoutingScheduleIDs.id);\r",
									"console.log(jsonData.data.id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{$randomBsBuzz}}\",\r\n    \"collections\": [3375, 4062, 10980, 11155, 10996, 11154, 1676, 10997, 11124, 11013, 10964, 11219, 6002, 6003, 6004],\r\n    \"description\": \"{{$randomBsBuzz}}\",\r\n    \"name\": \"{{$randomBsBuzz}}\",\r\n    \"timezone\": \"America/Denver\",\r\n    \"type\": \"SWITCH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/schedule",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request which will modify the Schedule and adds the Normal Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was updated.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{RoutingConPerNam}}\",\r\n    \"custom_schedules\": [],\r\n    \"description\": \"NEW\",\r\n    \"ends_at\": null,\r\n    \"id\": {{RoutingConPerId}},\r\n    \"is_change_pending\": true,\r\n    \"is_editable\": true,\r\n    \"is_timezone_required\": true,\r\n    \"name\": \"{{RoutingConPerNam}}\",\r\n    \"reset_time\": null,\r\n    \"reset_value\": null,\r\n    \"reset_value_enabled\": false,\r\n    \"schedules\": [],\r\n    \"starts_at\": null,\r\n    \"status\": false,\r\n    \"sync\": false,\r\n    \"table_column_name\": null,\r\n    \"timezone\": \"America/Denver\",\r\n    \"type\": {\"id\": 7, \"name\": \"Schedule\", \"description\": \"A schedule (by day and half hour)\", \"code\": \"SCHEDULE\"},\r\n    \"updated_at\": \"04/09/2022 02:35 AM\",\r\n    \"user\": {\"id\": 7362, \"username\": \"ppragna@HCS\"},\r\n    \"value\": \"100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConPerId}}/schedule",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConPerId}}",
								"schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request which will Clone the Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was cloned.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{$randomBsBuzz}}\",\r\n    \"collections\": [3375, 4062, 10980, 11155, 10996, 11154, 1676, 10997, 11124, 11013, 10964, 11219, 6002, 6003, 6004],\r\n    \"description\": \"{{$randomBsBuzz}}\",\r\n    \"name\": \"{{$randomBsBuzz}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConPerId}}/clone",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConPerId}}",
								"clone"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELTE - Request which will deletes the Schedule Control",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was deleted.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConPerId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConPerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Request which will search the Schedule Name with Filter as Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - Schedule Name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls?id_control_types[]=7&search={{RoutingConSchedNam}}&sortBy[]=LastUpdatedDateTime&direction=desc",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls"
							],
							"query": [
								{
									"key": "id_control_types[]",
									"value": "7"
								},
								{
									"key": "search",
									"value": "{{RoutingConSchedNam}}"
								},
								{
									"key": "sortBy[]",
									"value": "LastUpdatedDateTime"
								},
								{
									"key": "direction",
									"value": "desc"
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "500",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Method which will creates the Table Contorl Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The routing control was created.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"\r",
									"let jsonDataRoutingTableNam = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConTabNam\", jsonDataRoutingTableNam.name);\r",
									"console.log(jsonData.data.name);\r",
									"\r",
									"let jsonDataRoutingPercentIDs = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConTabId\", jsonDataRoutingPercentIDs.id);\r",
									"console.log(jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"collections\":[11183,1899,11142,7409,10962,11014],\"description\":\"{{$randomCity}}\",\r\n\"code\":\"{{$randomCity}}\",\"name\":\"{{$randomCity}}\",\"sync\":false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/table",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"table"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Request which will search the RC - Table Id and Gets the File id to upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls?id_control_types[]=10&search={{RoutingConTabNam}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls"
							],
							"query": [
								{
									"key": "id_control_types[]",
									"value": "10"
								},
								{
									"key": "search",
									"value": "{{RoutingConTabNam}}"
								},
								{
									"key": "sortBy[]",
									"value": "LastUpdatedDateTime",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request which will 'Bulk Upload' through csv file",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Content-Disposition",
									"value": " form-data; name=\"file\"; filename=\"table (8).csv\"",
									"type": "text"
								},
								{
									"key": "Content-Type",
									"value": " application/vnd.ms-excel",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "table (8).csv"
								}
							],
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConTabId}}/table/bulk-load/3012/file",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConTabId}}",
								"table",
								"bulk-load",
								"3012",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/5744/table/bulk-load/3017/file",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Content-Disposition",
									"value": " form-data; name=\"file\"; filename=\"table (8).csv\"",
									"type": "text"
								},
								{
									"key": "Content-Type",
									"value": " application/vnd.ms-excel",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "table (6).csv"
								}
							]
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConTabId}}/table/bulk-load/3024/file",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConTabId}}",
								"table",
								"bulk-load",
								"3024",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request which will Creates the Contorl Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									"\r",
									"\r",
									"let jsonDataRoutingTableFileId = pm.response.json().data;\r",
									"pm.globals.set(\"RoutingConTabFileId\", jsonDataRoutingTableFileId.id);\r",
									"console.log(jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConTabId}}/table/bulk-load",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConTabId}}",
								"table",
								"bulk-load"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Request which will deletes the Created RC - Table ones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The routing control was deleted.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConTabId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConTabId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request which will add the Data Types to the RC Table",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"code\": \"COLUMN_1\",\r\n    \"id\": 9903,\r\n    \"is_active\": true,\r\n    \"is_required\": true,\r\n    \"name\": \"COLUMN_1\",\r\n    \"number\": 0,\r\n    \"routing_control_id\": {{RoutingConTabId}},\r\n    \"type\": { \"code\": \"STRING\", \"id\": 1, \"name\": \"String\"}\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/routing-controls/{{RoutingConTabId}}/table-columns",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"routing-controls",
								"{{RoutingConTabId}}",
								"table-columns"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Audio Manager",
			"item": [
				{
					"name": "POST - Request which will Creates the Audio Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The audio group was created.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonDataAudioManagerName = pm.response.json().data;\r",
									"pm.globals.set(\"AudioManageNme\", jsonDataAudioManagerName.name);\r",
									"console.log(jsonData.data.name);\r",
									"\r",
									"let jsonDataAudioManagerIds = pm.response.json().data;\r",
									"pm.globals.set(\"AudioManageId\", jsonDataAudioManagerIds.id);\r",
									"console.log(jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" var code = Math.floor((Math.random()*10000)+1);\r",
									" console.log(code);\r",
									"\r",
									"pm.globals.set(\"code\", code);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\" : \"{{code}}\",\r\n    \"collections\": [9470, 8218, 9613, 9695, 9614],\r\n    \"description\": \"{{$randomStreetName}}\",\r\n    \"name\": \"{{$randomStreetName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/audio-groups",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"audio-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Request will modify the Audio Manager name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The audio group was updated.\",\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"OK\",\r\n    \"id\": \"{{AudioManageId}}\",\r\n    \"is_editable\": false,\r\n    \"name\": \"{{AudioManageNme}}\",\r\n    \"password\": 0,\r\n    \"prompt_ids\": []\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/audio-groups/{{AudioManageId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"audio-groups",
								"{{AudioManageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request  will Creates the 'Audio Prompts'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(\"json response : \", jsonData);\r",
									"\r",
									" messages = \r",
									" [\r",
									"      \"The given data was invalid.\",\r",
									"      \"The audio prompt was created.\",,\r",
									"      \"api.codes.TABLE_CONTROL_COLUMN_INVALID_CHARACTER\",\r",
									"      \"This code already exists.\",\r",
									"      \"Unauthenticated.\"\r",
									"      \r",
									" ]\r",
									" if (jsonData.type === \"error\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"audio_group_id\": \"{{AudioManageId}}\",\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{$randomFirstName}}\",\r\n    \"name\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/audio-prompts",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"audio-prompts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Campaigns",
			"item": [
				{
					"name": "GET - Request will Search the specific Campaign Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the Name should be Poorna- Campaign\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.include('Poorna');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Campaign id 5016001 - Campaign ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.include('5016001');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/campaigns",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"campaigns"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5000",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "POST - Request  'Clone' User Agent + Verint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" var phone = Math.floor(Math.random()*90000) + 10000;\r",
									" console.log(phone);\r",
									"\r",
									"pm.globals.set(\"phone\", phone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify the Status code is 200  or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"The user was cloned.\",\r",
									"       \"api.codes.CLONE_USER_FAILED_TO_CREATE_USER_IN_AD\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"ERROR\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" \r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"\r",
									"let jsonDataUserAgentNamedisplay = pm.response.json().data;\r",
									"pm.globals.set(\"UserAgentNam\", jsonDataUserAgentNamedisplay.first_name);\r",
									"console.log(jsonData.data.first_name);\r",
									"\r",
									"let jsonDataUserAgentNamedisplayId = pm.response.json().data;\r",
									"pm.globals.set(\"UserAgentNamId\", jsonDataUserAgentNamedisplayId.id);\r",
									"console.log(jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"agent_collections_ids\":[8249,8782,8770,8786,8787,8832,8777],\r\n\"agent_description\":null,\r\n\"agent_enterprise_name\":\"{{$randomFirstName}}{{$randomLastName}}{{phone}} \",\r\n\"agent_id\":\"{{phone}}\",\r\n\"contact_center_role_id\":1,\r\n\"email\":\"poorna.pragna@ttec.com\",\r\n\"first_name\":\"{{$randomFirstName}}\",\r\n\"last_name\":\"{{$randomLastName}}\",\r\n\"password\":\"\",\r\n\"phone\":\"{{phone}}\",\r\n\"reuse_agent_id\":true,\r\n\"sso_enabled_user\":null,\r\n\"user_collections_ids\":[],\r\n\"username\":\"{{$randomFirstName}}_{{$randomLastName}}{{phone}}\",\r\n\"create_verint_user\":true,\r\n\"verint_organization_id\":401,\r\n\"is_verint_supervisor\":false,\r\n\"is_verint_teamlead\":true,\r\n\"verint_supervisor_id\":551,\r\n\"verint_teamlead_id\":null,\r\n\"verint_jobtitle_id\":null}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users/8602/clone",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users",
								"8602",
								"clone"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Request will Search the User-Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or NOT ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - display_name \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"display_name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - first_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - last_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users?platform_id=5000001&filter_by_status=A&type=A&search={{UserAgentNam}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "platform_id",
									"value": "5000001"
								},
								{
									"key": "filter_by_status",
									"value": "A"
								},
								{
									"key": "type",
									"value": "A"
								},
								{
									"key": "search",
									"value": "{{UserAgentNam}}"
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sortBy[]",
									"value": "lastNm",
									"disabled": true
								},
								{
									"key": "sortBy[]",
									"value": "firstNm",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "asc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELET - Request which will deletes the User Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify the Status code is 200  or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"The user was deleted.\",\r",
									"       \"The user was not found.\",\r",
									"       \"api.codes.CLONE_USER_FAILED_TO_CREATE_USER_IN_AD\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"ERROR\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" \r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users/{{UserAgentNamId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{UserAgentNamId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request which will Clone the Supervisor User + Verint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" var phone = Math.floor(Math.random()*90000) + 10000;\r",
									" console.log(phone);\r",
									"\r",
									"pm.globals.set(\"phone\", phone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify the Status code is 200  or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"The user was cloned.\",\r",
									"       \"api.codes.CLONE_USER_FAILED_TO_CREATE_USER_IN_AD\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"ERROR\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"\r",
									"let jsonDataUserSupervisorNamedisplay = pm.response.json().data;\r",
									"pm.globals.set(\"UserSuperNam\", jsonDataUserSupervisorNamedisplay.first_name);\r",
									"console.log(jsonData.data.first_name);\r",
									"\r",
									"let jsonDataUserAgentNamedisplayId = pm.response.json().data;\r",
									"pm.globals.set(\"UserSuperNamId\", jsonDataUserAgentNamedisplayId.id);\r",
									"console.log(jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"agent_collections_ids\":[],\r\n    \"agent_description\":null,\r\n    \"agent_enterprise_name\":\"{{$randomFirstName}}{{$randomLastName}}{{phone}} \",\r\n    \"agent_id\":\"{{phone}}\",\r\n    \"contact_center_role_id\":2,\r\n    \"email\":\"poorna.pragna@ttec.com\",\r\n    \"first_name\":\"{{$randomFirstName}}\",\r\n    \"last_name\":\"{{$randomLastName}}\",\r\n    \"password\":\"\",\"phone\":\"{{phone}}\",\r\n    \"reuse_agent_id\":false,\r\n    \"sso_enabled_user\":false,\r\n    \"user_collections_ids\":[5534,5536,5537,5538,5539,5540,5541,5542,5543],\r\n    \"username\":\"{{$randomFirstName}}5{{$randomLastName}}{{phone}}\",\r\n    \"create_verint_user\":true,\r\n    \"verint_organization_id\":351,\r\n    \"is_verint_supervisor\":true,\r\n    \"is_verint_teamlead\":true,\r\n    \"verint_supervisor_id\":997,\r\n    \"verint_teamlead_id\":995,\r\n    \"verint_jobtitle_id\":null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users/8636/clone",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users",
								"8636",
								"clone"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Request which will search the Supervisor User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or NOT ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - display_name \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"display_name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - first_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - last_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users?platform_id=5000001&filter_by_status=A&type=S&search={{UserSuperNam}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "platform_id",
									"value": "5000001"
								},
								{
									"key": "filter_by_status",
									"value": "A"
								},
								{
									"key": "type",
									"value": "S"
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sortBy[]",
									"value": "lastNm",
									"disabled": true
								},
								{
									"key": "sortBy[]",
									"value": "firstNm",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "search",
									"value": "{{UserSuperNam}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Request which will 'Deletes' the User Supervisor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200  or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"The user was deleted.\",\r",
									"       \"The user was not found.\",\r",
									"       \"api.codes.CLONE_USER_FAILED_TO_CREATE_USER_IN_AD\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"ERROR\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" \r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users/{{UserSuperNamId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{UserSuperNamId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Request which will Clone the NON-Contact Center User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" var phone = Math.floor(Math.random()*90000) + 10000;\r",
									" console.log(phone);\r",
									"\r",
									"pm.globals.set(\"phone\", phone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify the Status code is 200  or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"The user was cloned.\",\r",
									"       \"api.codes.CLONE_USER_FAILED_TO_CREATE_USER_IN_AD\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"ERROR\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" \r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };\r",
									"\r",
									"\r",
									"let jsonDataUserNonContNamedisplay = pm.response.json().data;\r",
									"pm.globals.set(\"UserNonConNam\", jsonDataUserNonContNamedisplay.first_name);\r",
									"console.log(jsonData.data.first_name);\r",
									"\r",
									"let jsonDataUserAgentNamedisplayId = pm.response.json().data;\r",
									"pm.globals.set(\"UserNonConNamId\", jsonDataUserAgentNamedisplayId.id);\r",
									"console.log(jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"agent_collections_ids\":[],\r\n    \"agent_description\":null,\r\n    \"agent_enterprise_name\":\"{{$randomFirstName}}{{$randomLastName}}{{phone}} \",\r\n    \"agent_id\":null,\"contact_center_role_id\":3,\r\n    \"email\":\"poorna.pragna@ttec.com\",\r\n    \"first_name\":\"{{$randomFirstName}}\",\r\n    \"last_name\":\"{{$randomLastName}}\",\r\n    \"password\":\"\",\r\n    \"phone\":\"{{phone}}\",\r\n    \"reuse_agent_id\":false,\r\n    \"sso_enabled_user\":null,\r\n    \"user_collections_ids\":[9549,9469,8785],\r\n    \"username\":\"{{$randomFirstName}}8{{$randomLastName}}{{phone}}\",\r\n    \"create_verint_user\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users/1235/clone",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1235",
								"clone"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Request which will searh the NON-CONTACT User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or NOT ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - display_name \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"display_name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - first_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body matches string - last_name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users?filter_by_status=A&type=NC&search={{UserNonConNam}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "filter_by_status",
									"value": "A"
								},
								{
									"key": "type",
									"value": "NC"
								},
								{
									"key": "search",
									"value": "{{UserNonConNam}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Request which will Deletes the Non-Contact Cetner User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200  or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(),\r",
									" messages = \r",
									" [\r",
									"       \"The user was deleted.\",\r",
									"       \"The user was not found.\",\r",
									"       \"api.codes.CLONE_USER_FAILED_TO_CREATE_USER_IN_AD\",\r",
									"       \"We were unable to save the reason in Finesse\",\r",
									"       \"We were unable to create the reason in ICM\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									" if (jsonData.type === \"ERROR\") \r",
									" {\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"    })\r",
									" }\r",
									"\r",
									" \r",
									"\r",
									" else\r",
									" {\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => \r",
									"    {\r",
									"        pm.expect(jsonData.type).to.equal(\"success\")\r",
									"    })   \r",
									" };"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/users/{{UserNonConNamId}}",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{UserNonConNamId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Log Out",
			"item": [
				{
					"name": "GET Request -- Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the Status code is 200 or Not ?\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify the Body is correct type\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the Body is correct message -- You are signed out Or Not ? \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"You are signed out.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://portal-ng-q.tthcslabs.com/api/v1/logout",
							"protocol": "https",
							"host": [
								"portal-ng-q",
								"tthcslabs",
								"com"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "02bc7929-a3e4-4e82-afb0-bd648baa6ca0",
			"key": "api_url",
			"value": "https://portal-ng-q.tthcslabs.com/api/v1"
		},
		{
			"id": "305cb068-5309-4f63-8f11-c63f3447be23",
			"key": "username ",
			"value": "ppragna@hcs"
		},
		{
			"id": "385b272f-2244-4ec9-85e1-d80a3eaeaa08",
			"key": "password",
			"value": "Welcome2019!"
		}
	]
}